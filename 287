class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        slow = nums[0]
        fast = nums[nums[0]]
        while slow!=fast:
            slow = nums[slow]
            fast = nums[nums[fast]]
        fast = 0
        while slow!=fast:
            slow = nums[slow]
            fast = nums[fast]
        return slow
// idea: find sysle in a linkedlist, the index is current node, the value is next node's pointer
// use slow & fast pointer to find the meet point and then set one of them again to find the entry point for the cycle(which is our result)
// there is leet code discussion about the mathmatical prove process about it, please read and totally understand it
